NAME
    Black::Board - publish messages and subscribe to topics

VERSION
    version 0.0001

WARNING WARNING WARNING
    This is alpha quality code. It's a running experiment at the moment.
    When things are flushed out a little I can make a few more promises on
    future changes. For now I can make no promises. Use at your own risk!

SYNOPSIS
        use Log::Dispatch;
        use Black::Board;

        my $publisher = Black::Board::Publisher->new;

        my $log_topic = Black::Board::Topic->new(
            name => "LogDispatch"
        );

        $publisher->add_topic( $log_topic );

        my $logger = Log::Dispatch->new(
            outputs => [
                [ Screen => ( 'min_level' => 'debug' ) ]
            ]
        );

        $log_topic->add_subscriber(
            Black::Board::Subscriber->new(
                subscription => sub {
                    if ( $logger->would_log( $_->params->{level} ) ) {
                        $logger->log( %{ $_->params } );
                        # Let the caller have a way to check if we logged
                        $_->params->{log_sent_for} = $_->params->{level};
                    }
                    return $_->cancel_bubble;
                }
            )
        );

        $log_topic->add_subscriber(
            Black::Board::Subscriber->new(
                subscription => sub {
                    return $_->clone(
                        params => $_->params->merge( {
                            message => '[Prefix] ' . $_->params->{message}
                        } )
                    )
                }
            )
        );

        $publisher->publish(
            topic  => 'LogDispatch',
            message => {
                params => {
                    message => "Something that needs logging",
                    level   => "alert"
                }
            }
        );

        # -- OR -- #


        my $logger = Log::Dispatch->(
            outputs => [
                [ Screen => ( 'min_level' => 'debug' ) ]
            ]
        );

        # any arguments beyond the first are passed off to subscriber
        topic LogDispatch => sub {
            $logger->log( %{ $_->params } );
            return $_->cancel_bubble;
        };

        subscriber LogDispatch => sub {
            return $_->clone_with_params(
                message => '[Prefix] ' . $_->params->{message}
            )
        };

        publish LogDispatch => 
            params => {
                message => "Something that needs logging",
                level   => "alert"
            };

DESCRIPTION
    This code is inspired by Bread::Board and even a few bits were stolen
    from it.

    The purpose of this module is to provide a publisher/subscriber
    interface for passing messages. This subscriber interface has the
    ability for subscribers to act as filters on the message. Each
    subscriber can return a modified copy of the message. The message is
    cloned because the same message object should be able to be sent on
    multiple dispatch chains.

CLASS ATTRIBUTES
  Publisher
    This is the singleton Publisher object. You can set this to a different
    Publisher object but you should do this before you start declaring
    Topics or be prepared to copy the previously registered Topics into the
    new object.

FUNCTIONS
  "topic"
    First argument is the topic name to create. All other arguments are
    passed off to "METHODS/subscriber" as new subscription callbacks.

  "subscriber"
    Create a new Black::Board::Subscription object and adds it to the topic
    specified. First argument is a Black::Board::Topic or the name of one
    already registered. The second argument should be a code reference. The
    code reference is passed off to Black::Board::Subscriber as the
    "subscription" callback.

  "publish"
    Publishes the given message to the given topics. The first argument can
    be the topic name or an array reference of topic names to publish to.
    The second argument should be the message object we are publishing. If
    you specify a hash reference here it will be coerced into a
    Black::Board::Message object correct for this Topic.

EXPORTS
    *   topic

    *   subscriber

    *   publish

SEE ALSO
    *   Black::Board::Publisher

        Dispatcher and owner of Topics

    *   Black::Board::Topic

        A Topic object is a place to subclass for custom Topics that handle
        something more complicated than a "param()" based message.

    *   Black::Board::Message

        A "param()" based Message. Subclass for a more complicated Message.

    *   Black::Board::Subscriber

        Encapsulates subscriber hooks to maintain consistent calling
        conventions.

    *   Black::Board::Types

        If you are doing any subclassing, look here for the MooseX::Types.

AUTHOR
    Scott Beck <sabeck@cpan.org>

COPYRIGHT AND LICENSE
    This software is copyright (c) 2010 by Scott Beck <sabeck@cpan.org>.

    This is free software; you can redistribute it and/or modify it under
    the same terms as the Perl 5 programming language system itself.

